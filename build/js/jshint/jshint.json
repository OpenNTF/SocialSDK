{
    // --------------------------------------------------------------------
    // JSHint Configuration
    // --------------------------------------------------------------------
    //
    // This is a options template for [JSHint][1]
    //
    // [1]: http://www.jshint.com/
    //
    // @author Carlos Manias
    //
    // == Enforcing Options ===============================================
    //
    // These options tell JSHint to be more strict towards your code. Use
    // them if you want to allow only a safe subset of JavaScript, very
    // useful when your codebase is shared with a big number of developers
    // with different skill levels.

    "bitwise"       : false,     // Prohibit bitwise operators (&, |, ^, etc.).
    "curly"         : true,     // Require {} for every new block or scope.
    "eqeqeq"        : false,     // Require triple equals i.e. `===`.
    "forin"         : false,     // Tolerate `for in` loops without `hasOwnPrototype`.
    "immed"         : false,     // Require immediate invocations to be wrapped in parens e.g. `( function(){}() );`
    "latedef"       : false,     // Prohibit variable use before definition.
    "newcap"        : false,     // Require capitalization of all constructor functions e.g. `new F()`.
    "noarg"         : false,     // Prohibit use of `arguments.caller` and `arguments.callee`.
    "noempty"       : false,     // Prohibit use of empty blocks.
    "nonew"         : false,     // Prohibit use of constructors for side-effects.
    "plusplus"      : false,     // Prohibit use of `++` & `--`.
    "regexp"        : false,     // Prohibit `.` and `[^...]` in regular expressions.
    "undef"         : false,     // Require all non-global variables be declared before they are used.
    "strict"        : false,     // Require `use strict` pragma in every file.
    "trailing"      : false,     // Prohibit trailing whitespaces.
    
    // == Relaxing Options ================================================
    //
    // These options allow you to suppress certain types of warnings. Use
    // them only if you are absolutely positive that you know what you are
    // doing.
    
    "asi"           : false,    // Tolerate Automatic Semicolon Insertion (no semicolons).
    "boss"          : true,    // Tolerate assignments inside if, for & while. Usually conditions & loops are for comparison, not assignments.
    "debug"         : true,    // Allow debugger statements e.g. browser breakpoints.
    "eqnull"        : true,    // Tolerate use of `== null`.
    "es5"           : true,    // Allow EcmaScript 5 syntax.
    "esnext"        : true,    // Allow ES.next specific features such as `const` and `let`.
    "evil"          : true,    // Tolerate use of `eval`.
    "expr"          : true,    // Tolerate `ExpressionStatement` as Programs.
    "funcscope"     : true,    // Tolerate declarations of variables inside of control structures while accessing them later from the outside.
    "globalstrict"  : true,    // Allow global "use strict" (also enables 'strict').
    "iterator"      : true,    // Allow usage of __iterator__ property.
    "lastsemic"     : true,    // Tolerat missing semicolons when the it is omitted for the last statement in a one-line block.
    "laxbreak"      : true,    // Tolerate unsafe line breaks e.g. `return [\n] x` without semicolons.
    "laxcomma"      : true,    // Suppress warnings about comma-first coding style.
    "loopfunc"      : true,    // Allow functions to be defined within loops.
    "multistr"      : true,    // Tolerate multi-line strings.
    "onecase"       : true,    // Tolerate switches with just one case.
    "proto"         : true,    // Tolerate __proto__ property. This property is deprecated.
    "regexdash"     : true,    // Tolerate unescaped last dash i.e. `[-...]`.
    "scripturl"     : true,    // Tolerate script-targeted URLs.
    "smarttabs"     : true,    // Tolerate mixed tabs and spaces when the latter are used for alignmnent only.
    "shadow"        : false,    // Allows re-define variables later in code e.g. `var x=1; x=2;`.
    "sub"           : true,    // Tolerate all forms of subscript notation besides dot notation e.g. `dict['key']` instead of `dict.key`.
    "supernew"      : true,    // Tolerate `new function () { ... };` and `new Object;`.
    "validthis"     : true,    // Tolerate strict violations when the code is running in strict mode and you use this in a non-constructor function.
    
    // == Environments ====================================================
    //
    // These options pre-define global variables that are exposed by
    // popular JavaScript libraries and runtime environmentsâ€”such as
    // browser or node.js.
    
    "browser"       : true,     // Standard browser globals e.g. `window`, `document`.
    "couch"         : false,    // Enable globals exposed by CouchDB.
    "devel"         : true,    // Allow development statements e.g. `console.log();`.
    "dojo"          : false,    // Enable globals exposed by Dojo Toolkit.
    "jquery"        : false,    // Enable globals exposed by jQuery JavaScript library.
    "mootools"      : false,    // Enable globals exposed by MooTools JavaScript framework.
    "node"          : false,    // Enable globals available when code is running inside of the NodeJS runtime environment.
    "nonstandard"   : false,    // Define non-standard but widely adopted globals such as escape and unescape.
    "prototypejs"   : false,    // Enable globals exposed by Prototype JavaScript framework.
    "rhino"         : false,    // Enable globals available when your code is running inside of the Rhino runtime environment.
    "wsh"           : false,    // Enable globals available when your code is running as a script for the Windows Script Host.
    
    // == JSLint Legacy ===================================================
    //
    // These options are legacy from JSLint. Aside from bug fixes they will
    // not be improved in any way and might be removed at any point.
    
    "nomen"         : false,    // Prohibit use of initial or trailing underbars in names.
    "onevar"        : false,    // Allow only one `var` statement per function.
    "passfail"      : false,    // Stop on first error.
    "white"         : false,    // Check against strict whitespace and indentation rules.
    
    // == Undocumented Options ============================================
    //
    // While I've found these options in [example1][2] and [example2][3]
    // they are not described in the [JSHint Options documentation][4].
    //
    // [4]: http://www.jshint.com/options/

    "maxerr"        : 600,      // Maximum errors before stopping.

    // == SBTK custom options =============================================
    // We add these SBT custom flags so that we don't need to modify jshint.js to add a custom object on valOptions
    "predef"        : {         // Extra globals.
        "mixspaces"                 : false, //Mixed spaces and tabs
        "unsafechar"                : false, //Unsafe character
        "missingspace"              : false, //Missing space after ...
        "anonfunc"                  : true, //Anonymous function, please name it to increase servicieability
        "indentation"               : false, //Expected '...' to have an indentation at col instead at col
        "unexpectedspace"           : false, //Unexpected space after ...
        "useXtocompare"             : false, //Use '...' to compare with X (i.e. Use '===' to compare with '')
        "confusinguseof"            : false, //Confusing use of ... (i.e. Confusing use of '!')
        "unescaped"                 : false, //Unescaped char
        "missingradix"              : false, //Missing radix (for parseInt)
        "unnecessarysemicolon"      : false, //Unncessary semicolon
        "varnotdeclaredcorrectly"   : true, //Var not declared correctly (i.e. var myVar = badVar = 'value' refers to badVar)
        "varoverwrinIE"             : true, //Value of ... may be overwritten in IE (Refers to 'error' in a catch like in } catch (error) {)
        "outofscope"                : true, //... used out of scope (Refers to variables that can be hoisted, and works ok but can be confusing)
        "badforinvar"               : true, //Bad for in var (refers to a variable used in a for without declaring with the var keyword)
        "dupemember"                : true,  //Duplicate member
        "showevidence"              : true, //Show evidence in OptionsReporter
        "includeWarnings"           : true, //Include warnings in checkstyle options reporter
        "outputreport"              : "./target/report" //Path to output folder
    },
    "indent"        : 4         // Specify indentation spacing
}